// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/yext/cloudprober/surfacers/proto/config.proto

package cloudprober_surfacer

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import proto3 "github.com/yext/cloudprober/surfacers/file/proto"
import proto4 "github.com/yext/cloudprober/surfacers/postgres/proto"
import proto1 "github.com/yext/cloudprober/surfacers/prometheus/proto"
import proto2 "github.com/yext/cloudprober/surfacers/stackdriver/proto"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// Enumeration for each type of surfacer we can parse and create
type Type int32

const (
	Type_NONE         Type = 0
	Type_PROMETHEUS   Type = 1
	Type_STACKDRIVER  Type = 2
	Type_FILE         Type = 3
	Type_POSTGRES     Type = 4
	Type_USER_DEFINED Type = 99
)

var Type_name = map[int32]string{
	0:  "NONE",
	1:  "PROMETHEUS",
	2:  "STACKDRIVER",
	3:  "FILE",
	4:  "POSTGRES",
	99: "USER_DEFINED",
}
var Type_value = map[string]int32{
	"NONE":         0,
	"PROMETHEUS":   1,
	"STACKDRIVER":  2,
	"FILE":         3,
	"POSTGRES":     4,
	"USER_DEFINED": 99,
}

func (x Type) Enum() *Type {
	p := new(Type)
	*p = x
	return p
}
func (x Type) String() string {
	return proto.EnumName(Type_name, int32(x))
}
func (x *Type) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Type_value, data, "Type")
	if err != nil {
		return err
	}
	*x = Type(value)
	return nil
}
func (Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_config_043ae1fdcfa7eaa9, []int{0}
}

type SurfacerDef struct {
	// This name is used for logging. If not defined, it's derived from the type.
	// Note that this field is required for the USER_DEFINED surfacer type and
	// should match with the name that you used while registering the user defined
	// surfacer.
	Name *string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Type *Type   `protobuf:"varint,2,opt,name=type,enum=cloudprober.surfacer.Type" json:"type,omitempty"`
	// Matching surfacer specific configuration (one for each type in the above
	// enum)
	//
	// Types that are valid to be assigned to Surfacer:
	//	*SurfacerDef_PrometheusSurfacer
	//	*SurfacerDef_StackdriverSurfacer
	//	*SurfacerDef_FileSurfacer
	//	*SurfacerDef_PostgresSurfacer
	Surfacer             isSurfacerDef_Surfacer `protobuf_oneof:"surfacer"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *SurfacerDef) Reset()         { *m = SurfacerDef{} }
func (m *SurfacerDef) String() string { return proto.CompactTextString(m) }
func (*SurfacerDef) ProtoMessage()    {}
func (*SurfacerDef) Descriptor() ([]byte, []int) {
	return fileDescriptor_config_043ae1fdcfa7eaa9, []int{0}
}
func (m *SurfacerDef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SurfacerDef.Unmarshal(m, b)
}
func (m *SurfacerDef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SurfacerDef.Marshal(b, m, deterministic)
}
func (dst *SurfacerDef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SurfacerDef.Merge(dst, src)
}
func (m *SurfacerDef) XXX_Size() int {
	return xxx_messageInfo_SurfacerDef.Size(m)
}
func (m *SurfacerDef) XXX_DiscardUnknown() {
	xxx_messageInfo_SurfacerDef.DiscardUnknown(m)
}

var xxx_messageInfo_SurfacerDef proto.InternalMessageInfo

type isSurfacerDef_Surfacer interface {
	isSurfacerDef_Surfacer()
}

type SurfacerDef_PrometheusSurfacer struct {
	PrometheusSurfacer *proto1.SurfacerConf `protobuf:"bytes,10,opt,name=prometheus_surfacer,json=prometheusSurfacer,oneof"`
}
type SurfacerDef_StackdriverSurfacer struct {
	StackdriverSurfacer *proto2.SurfacerConf `protobuf:"bytes,11,opt,name=stackdriver_surfacer,json=stackdriverSurfacer,oneof"`
}
type SurfacerDef_FileSurfacer struct {
	FileSurfacer *proto3.SurfacerConf `protobuf:"bytes,12,opt,name=file_surfacer,json=fileSurfacer,oneof"`
}
type SurfacerDef_PostgresSurfacer struct {
	PostgresSurfacer *proto4.SurfacerConf `protobuf:"bytes,13,opt,name=postgres_surfacer,json=postgresSurfacer,oneof"`
}

func (*SurfacerDef_PrometheusSurfacer) isSurfacerDef_Surfacer()  {}
func (*SurfacerDef_StackdriverSurfacer) isSurfacerDef_Surfacer() {}
func (*SurfacerDef_FileSurfacer) isSurfacerDef_Surfacer()        {}
func (*SurfacerDef_PostgresSurfacer) isSurfacerDef_Surfacer()    {}

func (m *SurfacerDef) GetSurfacer() isSurfacerDef_Surfacer {
	if m != nil {
		return m.Surfacer
	}
	return nil
}

func (m *SurfacerDef) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *SurfacerDef) GetType() Type {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return Type_NONE
}

func (m *SurfacerDef) GetPrometheusSurfacer() *proto1.SurfacerConf {
	if x, ok := m.GetSurfacer().(*SurfacerDef_PrometheusSurfacer); ok {
		return x.PrometheusSurfacer
	}
	return nil
}

func (m *SurfacerDef) GetStackdriverSurfacer() *proto2.SurfacerConf {
	if x, ok := m.GetSurfacer().(*SurfacerDef_StackdriverSurfacer); ok {
		return x.StackdriverSurfacer
	}
	return nil
}

func (m *SurfacerDef) GetFileSurfacer() *proto3.SurfacerConf {
	if x, ok := m.GetSurfacer().(*SurfacerDef_FileSurfacer); ok {
		return x.FileSurfacer
	}
	return nil
}

func (m *SurfacerDef) GetPostgresSurfacer() *proto4.SurfacerConf {
	if x, ok := m.GetSurfacer().(*SurfacerDef_PostgresSurfacer); ok {
		return x.PostgresSurfacer
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*SurfacerDef) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _SurfacerDef_OneofMarshaler, _SurfacerDef_OneofUnmarshaler, _SurfacerDef_OneofSizer, []interface{}{
		(*SurfacerDef_PrometheusSurfacer)(nil),
		(*SurfacerDef_StackdriverSurfacer)(nil),
		(*SurfacerDef_FileSurfacer)(nil),
		(*SurfacerDef_PostgresSurfacer)(nil),
	}
}

func _SurfacerDef_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*SurfacerDef)
	// surfacer
	switch x := m.Surfacer.(type) {
	case *SurfacerDef_PrometheusSurfacer:
		_ = b.EncodeVarint(10<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.PrometheusSurfacer); err != nil {
			return err
		}
	case *SurfacerDef_StackdriverSurfacer:
		_ = b.EncodeVarint(11<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.StackdriverSurfacer); err != nil {
			return err
		}
	case *SurfacerDef_FileSurfacer:
		_ = b.EncodeVarint(12<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.FileSurfacer); err != nil {
			return err
		}
	case *SurfacerDef_PostgresSurfacer:
		_ = b.EncodeVarint(13<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.PostgresSurfacer); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("SurfacerDef.Surfacer has unexpected type %T", x)
	}
	return nil
}

func _SurfacerDef_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*SurfacerDef)
	switch tag {
	case 10: // surfacer.prometheus_surfacer
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(proto1.SurfacerConf)
		err := b.DecodeMessage(msg)
		m.Surfacer = &SurfacerDef_PrometheusSurfacer{msg}
		return true, err
	case 11: // surfacer.stackdriver_surfacer
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(proto2.SurfacerConf)
		err := b.DecodeMessage(msg)
		m.Surfacer = &SurfacerDef_StackdriverSurfacer{msg}
		return true, err
	case 12: // surfacer.file_surfacer
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(proto3.SurfacerConf)
		err := b.DecodeMessage(msg)
		m.Surfacer = &SurfacerDef_FileSurfacer{msg}
		return true, err
	case 13: // surfacer.postgres_surfacer
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(proto4.SurfacerConf)
		err := b.DecodeMessage(msg)
		m.Surfacer = &SurfacerDef_PostgresSurfacer{msg}
		return true, err
	default:
		return false, nil
	}
}

func _SurfacerDef_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*SurfacerDef)
	// surfacer
	switch x := m.Surfacer.(type) {
	case *SurfacerDef_PrometheusSurfacer:
		s := proto.Size(x.PrometheusSurfacer)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *SurfacerDef_StackdriverSurfacer:
		s := proto.Size(x.StackdriverSurfacer)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *SurfacerDef_FileSurfacer:
		s := proto.Size(x.FileSurfacer)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *SurfacerDef_PostgresSurfacer:
		s := proto.Size(x.PostgresSurfacer)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func init() {
	proto.RegisterType((*SurfacerDef)(nil), "cloudprober.surfacer.SurfacerDef")
	proto.RegisterEnum("cloudprober.surfacer.Type", Type_name, Type_value)
}

func init() {
	proto.RegisterFile("github.com/yext/cloudprober/surfacers/proto/config.proto", fileDescriptor_config_043ae1fdcfa7eaa9)
}

var fileDescriptor_config_043ae1fdcfa7eaa9 = []byte{
	// 382 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x91, 0xc1, 0x8f, 0xd2, 0x40,
	0x18, 0xc5, 0xb7, 0xbb, 0x3d, 0xe0, 0xd7, 0xee, 0x3a, 0x0e, 0x1c, 0x08, 0x27, 0xe2, 0x45, 0xa2,
	0x71, 0x9a, 0x70, 0xf2, 0xe2, 0x01, 0xe9, 0x20, 0x44, 0x2d, 0x64, 0x5a, 0x3c, 0xe8, 0x01, 0xa1,
	0x4c, 0xa1, 0x11, 0x98, 0x66, 0xda, 0x1a, 0xf9, 0x2f, 0xfd, 0x93, 0x4c, 0x1b, 0x86, 0x36, 0x64,
	0x36, 0xe9, 0xad, 0x9d, 0xef, 0xbd, 0xdf, 0x9b, 0x79, 0x1f, 0x7c, 0xd8, 0xc5, 0xd9, 0x3e, 0xdf,
	0x90, 0x50, 0x1c, 0x9d, 0x33, 0xff, 0x9b, 0x39, 0xe1, 0x41, 0xe4, 0xdb, 0x44, 0x8a, 0x0d, 0x97,
	0x4e, 0x9a, 0xcb, 0x68, 0x1d, 0x72, 0x99, 0x3a, 0x89, 0x14, 0x99, 0x70, 0x42, 0x71, 0x8a, 0xe2,
	0x1d, 0x29, 0x7f, 0x70, 0xa7, 0xa6, 0x24, 0x4a, 0xd9, 0x1b, 0x37, 0xe6, 0x1d, 0x79, 0xb6, 0xe7,
	0xb9, 0x0e, 0xdd, 0x73, 0x9b, 0x41, 0xd2, 0x6c, 0x1d, 0xfe, 0xde, 0xca, 0xf8, 0x0f, 0x97, 0x3a,
	0xca, 0xc7, 0x66, 0x94, 0x28, 0x3e, 0x70, 0x9d, 0x7d, 0xd4, 0xf0, 0x25, 0x22, 0xcd, 0x76, 0x92,
	0xeb, 0xde, 0xf1, 0xfa, 0xdf, 0x03, 0x58, 0xfe, 0x45, 0xe9, 0xf2, 0x08, 0x63, 0x30, 0x4f, 0xeb,
	0x23, 0xef, 0x1a, 0x7d, 0x63, 0xf0, 0x82, 0x95, 0xdf, 0x98, 0x80, 0x99, 0x9d, 0x13, 0xde, 0xbd,
	0xef, 0x1b, 0x83, 0xa7, 0x61, 0x8f, 0xe8, 0x5a, 0x25, 0xc1, 0x39, 0xe1, 0xac, 0xd4, 0xe1, 0x5f,
	0xd0, 0xae, 0xca, 0x5b, 0x29, 0x45, 0x17, 0xfa, 0xc6, 0xc0, 0x1a, 0xbe, 0xd7, 0xdb, 0x2b, 0x03,
	0x51, 0xd7, 0x19, 0x8b, 0x53, 0x34, 0xbd, 0x63, 0xb8, 0x1a, 0xa9, 0x09, 0x0e, 0xa1, 0x53, 0x6b,
	0xb6, 0x8a, 0xb0, 0xca, 0x08, 0xa2, 0x8f, 0xa8, 0x39, 0x6e, 0x33, 0xda, 0xb5, 0xd9, 0x35, 0xc4,
	0x83, 0xc7, 0xa2, 0xf8, 0x8a, 0x6e, 0x97, 0xf4, 0x37, 0x7a, 0x7a, 0x21, 0xbd, 0xc5, 0xda, 0xc5,
	0xe1, 0x95, 0xf7, 0x03, 0x5e, 0xa9, 0x4d, 0x54, 0xcc, 0xc7, 0x92, 0xf9, 0xee, 0x99, 0x52, 0x2e,
	0xf2, 0x5b, 0x2e, 0x52, 0x03, 0x75, 0xfe, 0x09, 0xa0, 0xa5, 0x5c, 0x6f, 0x7f, 0x82, 0x59, 0x2c,
	0x03, 0xb7, 0xc0, 0xf4, 0xe6, 0x1e, 0x45, 0x77, 0xf8, 0x09, 0x60, 0xc1, 0xe6, 0xdf, 0x68, 0x30,
	0xa5, 0x4b, 0x1f, 0x19, 0xf8, 0x25, 0x58, 0x7e, 0x30, 0x1a, 0x7f, 0x71, 0xd9, 0xec, 0x3b, 0x65,
	0xe8, 0xbe, 0x90, 0x4e, 0x66, 0x5f, 0x29, 0x7a, 0xc0, 0x36, 0xb4, 0x16, 0x73, 0x3f, 0xf8, 0xcc,
	0xa8, 0x8f, 0x4c, 0x8c, 0xc0, 0x5e, 0xfa, 0x94, 0xad, 0x5c, 0x3a, 0x99, 0x79, 0xd4, 0x45, 0xe1,
	0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0xca, 0xbe, 0xf5, 0xbf, 0x8d, 0x03, 0x00, 0x00,
}
