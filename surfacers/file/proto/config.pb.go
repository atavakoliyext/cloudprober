// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/yext/cloudprober/surfacers/file/proto/config.proto

package cloudprober_surfacer_file

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type SurfacerConf struct {
	// Where to write the results. If left unset, file surfacer writes to the
	// standard output.
	FilePath *string `protobuf:"bytes,1,opt,name=file_path,json=filePath" json:"file_path,omitempty"`
	Prefix   *string `protobuf:"bytes,2,opt,name=prefix,def=cloudprober" json:"prefix,omitempty"`
	// Compress data before writing to the file.
	CompressionEnabled   *bool    `protobuf:"varint,3,opt,name=compression_enabled,json=compressionEnabled,def=0" json:"compression_enabled,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SurfacerConf) Reset()         { *m = SurfacerConf{} }
func (m *SurfacerConf) String() string { return proto.CompactTextString(m) }
func (*SurfacerConf) ProtoMessage()    {}
func (*SurfacerConf) Descriptor() ([]byte, []int) {
	return fileDescriptor_config_21974ef7c72b34d6, []int{0}
}
func (m *SurfacerConf) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SurfacerConf.Unmarshal(m, b)
}
func (m *SurfacerConf) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SurfacerConf.Marshal(b, m, deterministic)
}
func (dst *SurfacerConf) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SurfacerConf.Merge(dst, src)
}
func (m *SurfacerConf) XXX_Size() int {
	return xxx_messageInfo_SurfacerConf.Size(m)
}
func (m *SurfacerConf) XXX_DiscardUnknown() {
	xxx_messageInfo_SurfacerConf.DiscardUnknown(m)
}

var xxx_messageInfo_SurfacerConf proto.InternalMessageInfo

const Default_SurfacerConf_Prefix string = "cloudprober"
const Default_SurfacerConf_CompressionEnabled bool = false

func (m *SurfacerConf) GetFilePath() string {
	if m != nil && m.FilePath != nil {
		return *m.FilePath
	}
	return ""
}

func (m *SurfacerConf) GetPrefix() string {
	if m != nil && m.Prefix != nil {
		return *m.Prefix
	}
	return Default_SurfacerConf_Prefix
}

func (m *SurfacerConf) GetCompressionEnabled() bool {
	if m != nil && m.CompressionEnabled != nil {
		return *m.CompressionEnabled
	}
	return Default_SurfacerConf_CompressionEnabled
}

func init() {
	proto.RegisterType((*SurfacerConf)(nil), "cloudprober.surfacer.file.SurfacerConf")
}

func init() {
	proto.RegisterFile("github.com/yext/cloudprober/surfacers/file/proto/config.proto", fileDescriptor_config_21974ef7c72b34d6)
}

var fileDescriptor_config_21974ef7c72b34d6 = []byte{
	// 193 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0xcc, 0xb1, 0x4a, 0xc5, 0x30,
	0x14, 0xc6, 0x71, 0xa2, 0x28, 0x6d, 0x74, 0x8a, 0x4b, 0xc5, 0xa5, 0xe8, 0xd2, 0x29, 0xd9, 0x1c,
	0x0a, 0x4e, 0xe2, 0x2e, 0xf5, 0x01, 0x4a, 0x9a, 0x9e, 0xb4, 0x81, 0x34, 0x27, 0x24, 0x29, 0xd4,
	0x37, 0xb8, 0x8f, 0x7d, 0xc9, 0xbd, 0xbd, 0xd0, 0xf1, 0x7c, 0xff, 0x1f, 0x87, 0x7e, 0x4d, 0x26,
	0xcd, 0xeb, 0xc0, 0x15, 0x2e, 0xe2, 0x1f, 0xb6, 0x24, 0x94, 0xc5, 0x75, 0xf4, 0x01, 0x07, 0x08,
	0x22, 0xae, 0x41, 0x4b, 0x05, 0x21, 0x0a, 0x6d, 0x2c, 0x08, 0x1f, 0x30, 0xa1, 0x50, 0xe8, 0xb4,
	0x99, 0xf8, 0xe5, 0x60, 0xaf, 0x07, 0xce, 0x6f, 0x9c, 0x67, 0xfd, 0x7e, 0x22, 0xf4, 0xf9, 0x6f,
	0x5f, 0xbe, 0xd1, 0x69, 0xf6, 0x46, 0xcb, 0x1c, 0x7a, 0x2f, 0xd3, 0x5c, 0x91, 0x9a, 0x34, 0x65,
	0x57, 0xe4, 0xe1, 0x57, 0xa6, 0x99, 0x7d, 0xd0, 0x47, 0x1f, 0x40, 0x9b, 0xad, 0xba, 0xcb, 0xa5,
	0x7d, 0x3a, 0x3c, 0xee, 0xf6, 0xc4, 0x3e, 0xe9, 0x8b, 0xc2, 0xc5, 0x07, 0x88, 0xd1, 0xa0, 0xeb,
	0xc1, 0xc9, 0xc1, 0xc2, 0x58, 0xdd, 0xd7, 0xa4, 0x29, 0xda, 0x07, 0x2d, 0x6d, 0x84, 0x8e, 0x1d,
	0xc4, 0xcf, 0x15, 0x9c, 0x03, 0x00, 0x00, 0xff, 0xff, 0xe6, 0xff, 0x0b, 0x66, 0xe5, 0x00, 0x00,
	0x00,
}
