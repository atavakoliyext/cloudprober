// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/yext/cloudprober/probes/udplistener/proto/config.proto

package cloudprober_probes_udplistener

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// Probe response to an incoming packet: echo back or discard.
type ProbeConf_Type int32

const (
	ProbeConf_INVALID ProbeConf_Type = 0
	ProbeConf_ECHO    ProbeConf_Type = 1
	ProbeConf_DISCARD ProbeConf_Type = 2
)

var ProbeConf_Type_name = map[int32]string{
	0: "INVALID",
	1: "ECHO",
	2: "DISCARD",
}
var ProbeConf_Type_value = map[string]int32{
	"INVALID": 0,
	"ECHO":    1,
	"DISCARD": 2,
}

func (x ProbeConf_Type) Enum() *ProbeConf_Type {
	p := new(ProbeConf_Type)
	*p = x
	return p
}
func (x ProbeConf_Type) String() string {
	return proto.EnumName(ProbeConf_Type_name, int32(x))
}
func (x *ProbeConf_Type) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ProbeConf_Type_value, data, "ProbeConf_Type")
	if err != nil {
		return err
	}
	*x = ProbeConf_Type(value)
	return nil
}
func (ProbeConf_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_config_9d927480c3940e5a, []int{0, 0}
}

type ProbeConf struct {
	// Export stats after these many milliseconds
	StatsExportIntervalMsec *int32 `protobuf:"varint,2,opt,name=stats_export_interval_msec,json=statsExportIntervalMsec,def=10000" json:"stats_export_interval_msec,omitempty"`
	// Port to listen.
	Port *int32          `protobuf:"varint,3,opt,name=port,def=32212" json:"port,omitempty"`
	Type *ProbeConf_Type `protobuf:"varint,4,opt,name=type,enum=cloudprober.probes.udplistener.ProbeConf_Type" json:"type,omitempty"`
	// Number of packets sent in a single probe.
	PacketsPerProbe      *int32   `protobuf:"varint,5,opt,name=packets_per_probe,json=packetsPerProbe,def=1" json:"packets_per_probe,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ProbeConf) Reset()         { *m = ProbeConf{} }
func (m *ProbeConf) String() string { return proto.CompactTextString(m) }
func (*ProbeConf) ProtoMessage()    {}
func (*ProbeConf) Descriptor() ([]byte, []int) {
	return fileDescriptor_config_9d927480c3940e5a, []int{0}
}
func (m *ProbeConf) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProbeConf.Unmarshal(m, b)
}
func (m *ProbeConf) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProbeConf.Marshal(b, m, deterministic)
}
func (dst *ProbeConf) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProbeConf.Merge(dst, src)
}
func (m *ProbeConf) XXX_Size() int {
	return xxx_messageInfo_ProbeConf.Size(m)
}
func (m *ProbeConf) XXX_DiscardUnknown() {
	xxx_messageInfo_ProbeConf.DiscardUnknown(m)
}

var xxx_messageInfo_ProbeConf proto.InternalMessageInfo

const Default_ProbeConf_StatsExportIntervalMsec int32 = 10000
const Default_ProbeConf_Port int32 = 32212
const Default_ProbeConf_PacketsPerProbe int32 = 1

func (m *ProbeConf) GetStatsExportIntervalMsec() int32 {
	if m != nil && m.StatsExportIntervalMsec != nil {
		return *m.StatsExportIntervalMsec
	}
	return Default_ProbeConf_StatsExportIntervalMsec
}

func (m *ProbeConf) GetPort() int32 {
	if m != nil && m.Port != nil {
		return *m.Port
	}
	return Default_ProbeConf_Port
}

func (m *ProbeConf) GetType() ProbeConf_Type {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return ProbeConf_INVALID
}

func (m *ProbeConf) GetPacketsPerProbe() int32 {
	if m != nil && m.PacketsPerProbe != nil {
		return *m.PacketsPerProbe
	}
	return Default_ProbeConf_PacketsPerProbe
}

func init() {
	proto.RegisterType((*ProbeConf)(nil), "cloudprober.probes.udplistener.ProbeConf")
	proto.RegisterEnum("cloudprober.probes.udplistener.ProbeConf_Type", ProbeConf_Type_name, ProbeConf_Type_value)
}

func init() {
	proto.RegisterFile("github.com/yext/cloudprober/probes/udplistener/proto/config.proto", fileDescriptor_config_9d927480c3940e5a)
}

var fileDescriptor_config_9d927480c3940e5a = []byte{
	// 272 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x8e, 0x4d, 0x4b, 0xc3, 0x30,
	0x1c, 0x87, 0x6d, 0x6d, 0x51, 0x23, 0x68, 0xcd, 0xc5, 0xea, 0x41, 0xc6, 0x4e, 0x43, 0x30, 0x7d,
	0xf1, 0xe6, 0xad, 0x6b, 0x07, 0x16, 0x7c, 0x19, 0x55, 0xbc, 0x86, 0x2e, 0xfb, 0x6f, 0x16, 0xbb,
	0x26, 0x24, 0xa9, 0xac, 0x1f, 0xc1, 0x6f, 0x2d, 0x4d, 0x87, 0xec, 0xe4, 0x29, 0xe4, 0xc9, 0xf3,
	0x90, 0x1f, 0x4a, 0xd6, 0x95, 0xfe, 0x6c, 0x17, 0x84, 0xf1, 0x4d, 0xd0, 0xc1, 0x56, 0x07, 0xac,
	0xe6, 0xed, 0x52, 0x48, 0xbe, 0x00, 0x19, 0x98, 0x43, 0x05, 0xed, 0x52, 0xd4, 0x95, 0xd2, 0xd0,
	0x0c, 0x48, 0xf3, 0x80, 0xf1, 0x66, 0x55, 0xad, 0x89, 0xb9, 0xe0, 0x9b, 0xbd, 0x84, 0x0c, 0x09,
	0xd9, 0x4b, 0xc6, 0x3f, 0x36, 0x3a, 0x99, 0xf7, 0x38, 0xe5, 0xcd, 0x0a, 0x4f, 0xd1, 0xb5, 0xd2,
	0xa5, 0x56, 0x14, 0xb6, 0x82, 0x4b, 0x4d, 0xab, 0x46, 0x83, 0xfc, 0x2e, 0x6b, 0xba, 0x51, 0xc0,
	0x7c, 0x7b, 0x64, 0x4d, 0xdc, 0x07, 0x37, 0x0a, 0xc3, 0x30, 0x2c, 0x2e, 0x8d, 0x38, 0x33, 0x5e,
	0xbe, 0xd3, 0x9e, 0x15, 0x30, 0x7c, 0x85, 0x9c, 0x9e, 0xf9, 0x87, 0x83, 0x7d, 0x1f, 0xc7, 0x51,
	0x5c, 0x18, 0x84, 0xa7, 0xc8, 0xd1, 0x9d, 0x00, 0xdf, 0x19, 0x59, 0x93, 0xb3, 0x98, 0x90, 0xff,
	0xb7, 0x91, 0xbf, 0x5d, 0xe4, 0xbd, 0x13, 0x50, 0x98, 0x16, 0xdf, 0xa1, 0x0b, 0x51, 0xb2, 0x2f,
	0xd0, 0x8a, 0x0a, 0x90, 0xd4, 0x64, 0xbe, 0x6b, 0xfe, 0xb2, 0xa2, 0xe2, 0x7c, 0xf7, 0x36, 0x07,
	0x69, 0xea, 0xf1, 0x2d, 0x72, 0xfa, 0x18, 0x9f, 0xa2, 0xa3, 0xfc, 0xe5, 0x23, 0x79, 0xca, 0x33,
	0xef, 0x00, 0x1f, 0x23, 0x67, 0x96, 0x3e, 0xbe, 0x7a, 0x56, 0x8f, 0xb3, 0xfc, 0x2d, 0x4d, 0x8a,
	0xcc, 0xb3, 0x7f, 0x03, 0x00, 0x00, 0xff, 0xff, 0x7a, 0x98, 0xbe, 0x7e, 0x6f, 0x01, 0x00, 0x00,
}
